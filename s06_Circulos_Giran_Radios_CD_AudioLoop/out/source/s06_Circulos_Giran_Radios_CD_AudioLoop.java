/* autogenerated by Processing revision 1286 on 2022-12-18 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.Random;
import processing.pdf.*;
import java.util.Calendar;
import java.util.Random;
import ddf.minim.analysis.FFT;
import ddf.minim.*;
import com.hamoid.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class s06_Circulos_Giran_Radios_CD_AudioLoop extends PApplet {








//Cosas de Audio
Minim minim;
AudioInput input;
FFT fftLog;
AudioPlayer song;


//Var de círculos
Circulos cir;
CirculosConcent miCirculoOrigen, miCirculoOrigenlinea2;
int NUM_CIRCULOS_INTERIORES=5;
int NUM_CIRCULOS_CONCENT=11;
float INCREMENTO_AN=0.01f;
float centroX=width/2;
float centroY=height/2;

float RADIO_ACUMULADO=0;
boolean sentido = true;

ArrayList<CirculosConcent> listaC = new ArrayList<CirculosConcent>();

/////////
Random generator;


 public void setup() {
  
    float radioOriginal=75;
    frameRate(60);
    /* size commented out by preprocessor */;
    centroX=width/2;
    centroY=height/2;
    background(0);
    //blendMode(EXCLUSION);
    stroke(250);
    strokeWeight(1);


    //Cargamos Audio
    minim = new Minim(this);
    song = minim.loadFile("newSong.mp3");
    song.play();
    song.loop();
    

    ///Inicializaciones
    miCirculoOrigen=new CirculosConcent(new Circulos(centroX, centroY, radioOriginal,0),NUM_CIRCULOS_INTERIORES);
    listaC.add(miCirculoOrigen);
    RADIO_ACUMULADO+=radioOriginal;
    float VELOCIDAD=180;
    
    for(int i=1;i<NUM_CIRCULOS_CONCENT;i++){
       float radioAleatorio=random(radioOriginal/5,radioOriginal);

       miCirculoOrigenlinea2=new CirculosConcent(new Circulos(RADIO_ACUMULADO+radioAleatorio, 0.0f, radioAleatorio,radians(VELOCIDAD/i)),NUM_CIRCULOS_INTERIORES);
              
       listaC.add(miCirculoOrigenlinea2);
        RADIO_ACUMULADO+=radioAleatorio*2;
        
    }
    //Inicializar el generador Aleatorio
    generator= new Random();
    
}

 public void draw() {

        background(0);
        smooth();

        pushMatrix();
        stroke(250);
        noFill();
        ellipseMode(CENTER);
        translate(listaC.get(0).origen.posX, listaC.get(0).origen.posY);
        //ellipse(0,0,listaC.get(0).origen.diametro,listaC.get(0).origen.diametro);
        listaC.get(0).origen.diametro=RuidoGauss(listaC.get(0).origen.diametro);
        ellipse(0,0,listaC.get(0).origen.diametro,listaC.get(0).origen.diametro);

        for (Circulos o : listaC.get(0).listaCirculos) { 
               pushMatrix();
                listaC.get(0).calculaCentroRuido(o);
                rotate(o.angulo);
                stroke(0xFF1ECAF7);
                ellipse(o.posX, o.posY, o.diametro, o.diametro);
                o.angulo+=o.vel;
              popMatrix();
        }
        stroke(250);
        for(int i=1;i<listaC.size();i++){
            listaC.get(i).RADIO_TOTAL=RuidoGauss(listaC.get(i).RADIO_TOTAL);
            listaC.get(i).origen.posX=listaC.get(i).RADIO_TOTAL-listaC.get(i).origen.radio;
            ellipse(0,0,listaC.get(i).RADIO_TOTAL*2,listaC.get(i).RADIO_TOTAL*2);
            
        }      
        
        for(int i=1;i<listaC.size();i++){
            pushMatrix();
            stroke(250);
            
            rotate(listaC.get(i).origen.angulo);
            
            ellipse(listaC.get(i).origen.posX,listaC.get(i).origen.posY,listaC.get(i).origen.diametro,listaC.get(i).origen.diametro);
            
           
            if(i%2==0){
                if(sentido)
                    listaC.get(i).origen.angulo+=radians(listaC.get(i).origen.vel);
                else
                    listaC.get(i).origen.angulo-=radians(listaC.get(i).origen.vel);
            }else{
                if(sentido)
                    listaC.get(i).origen.angulo-=radians(listaC.get(i).origen.vel);
                else
                    listaC.get(i).origen.angulo+=radians(listaC.get(i).origen.vel);
            }
            
            
           
            pushMatrix();
            ellipseMode(CENTER);
            translate(listaC.get(i).origen.posX, listaC.get(i).origen.posY);
            for (Circulos o : listaC.get(i).listaCirculos) { 
                pushMatrix();
                stroke(0xFF1ECAF7);
                rotate(o.angulo);
                ellipse(o.posX, o.posY, o.diametro, o.diametro);
                o.angulo+=o.vel;
                
                popMatrix();
            }
            popMatrix();
            popMatrix();
        }
        
        popMatrix();   
        
        //recordVideo();
}

 public void keyPressed() {
    if(sentido)
        sentido=false;
    else
        sentido=true;    
}

 public float RuidoGauss(float radioSinMov) {
    

    float h = (float)generator.nextGaussian();
    //println(h);
    h*=0; //Desviación Estandar. Hacemos la campan más ancha
    h+=radioSinMov; //Añadimos la media para desplazarla
    
    return h;
    //ellipse(width/2, height/2, h, h);
}
public class Circulos {

    float diametro=0, radio=0;
    float posX=0, posY=0;
    float angulo=0;
    String nom;
    float vel;

 public Circulos (float x, float y, float d, float v) {
        posX=x;
        posY=y;
        radio=d;
        diametro=d*2;
        vel=v;
    }

    public Circulos (float x, float y, float d,String nombre) {
        posX=x;
        posY=y;
        radio=d;
        diametro=d*2;
        nom=nombre;
    }


     public void display(){
        pushMatrix();
        translate(posX, posY);
        noFill();
        ellipseMode(CENTER);
        ellipse(0, 0, diametro, diametro);
        popMatrix();
    }

}
public class CirculosConcent{

    Random generator;
    ArrayList<Circulos> listaCirculos = new ArrayList<Circulos>();
    
    int des=0;
    float angulo=0;
    Circulos origen;
    float VELOCIDAD_INTERIOR=5;
    float LIM_INF_RAD=0.3f;
    float LIM_SUP_RAD=1;
    float RADIO_TOTAL;
    


    public CirculosConcent(Circulos c, int numCir){
            origen=c;
            origen.angulo=radians(random(0,360));
            RADIO_TOTAL=c.posX+c.radio;
            
            for (int i = 0; i < numCir; ++i) {
                int diametroNuevo=(int)((c.radio/2)*constrain(random(0,1), 0.01f, 1));
               
                Circulos c1=new Circulos(0,0,diametroNuevo,radians(random(0,VELOCIDAD_INTERIOR)));
                
                calculaCentro(c1,0);
                listaCirculos.add(c1);
            }
            
        }

   

     public void calculaCentro(Circulos c, int angulo){
        int puntoXext=0;
        int puntoYext=0;

        puntoXext=(int)(0+origen.radio*cos(radians(angulo)));
        

        
        c.posX=puntoXext-c.radio;
        c.posY=puntoYext; //la CoordendaY la ponemos siempre en el 0
        c.angulo=radians(random(0, 360));
    }

     public void calculaCentroRuido(Circulos c){
        int puntoXext=0;
        int puntoYext=0;

        puntoXext=(int)(0+(origen.diametro/2)*cos(radians(angulo)));
        

        
        c.posX=puntoXext-c.radio;
        c.posY=puntoYext; //la CoordendaY la ponemos siempre en el 0
        //c.angulo=radians(random(0, 360));
    }
}
final String sketchname = getClass().getName();


VideoExport videoExport;



 public String timestamp() {
  Calendar now = Calendar.getInstance();
  return String.format("%1$ty%1$tm%1$td_%1$tH%1$tM%1$tS", now);
}

 public void recordVideo() {
  if (frameCount == 1) {
    videoExport = new VideoExport(this, "./export_video/"+sketchname+timestamp()+"_##.mp4");
    videoExport.setFrameRate(60);  
    videoExport.startMovie();
  }
  videoExport.saveFrame();
  println("Recording is ON | Frame: "+frameCount+" | FrameRate: "+frameRate);

 /*  if(key=='q'){
    videoExport.endMovie();
    println("VIDEO GRABADO");
    exit();
  } */
}


  public void settings() { size(1920, 1080); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "s06_Circulos_Giran_Radios_CD_AudioLoop" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
